heat_template_version: 2015-10-15
description: Deployment Description for MongoDB Replica Set
parameters:
  image_id:
    type: string
    description: Image used for servers
  keypair:
    type: string
    description: SSH key to connect to the servers
  flavor:
    type: string
    description: flavor used by the web servers
  volume_size:
    type: number
    description: Size of the volume to be created.
  availability_zone:
    type: string
    description: The Availability Zone to launch the instance.
  database_name:
    type: string
    description: Database name
  database_user:
    type: string
    description: Database user
  database_password:
    type: string
    description: Database password
  database_number:
    type: string
    description: Database number
  database_key:
    type: string
    description: Database key
  log_host:
    type: string
    description: Host IP or FQDN for logging
  log_port:
    type: string
    description: Port for logging host
  erlang_key:
    type: string
    description: shared erlang key for all nodes
  hostnames:
    type: string
    description: All hostnames in format to attach to /etc/hosts
  hostname:
    type: string
    description: Hostname of machine
  port_prim:
    type: string
    description: port of primary vm
resources:
  cinder_volume_prim:
    type: OS::Cinder::Volume
    properties:
      size: { get_param: volume_size }
      availability_zone: { get_param: availability_zone }
  volume_attachment_prim:
    type: OS::Cinder::VolumeAttachment
    properties:
      volume_id: { get_resource: cinder_volume_prim }
      instance_uuid: { get_resource: rabbit_prim }
      mountpoint: /dev/vdc
  rabbit_prim:
    type: OS::Nova::Server
    properties:
      flavor: { get_param: flavor }
      image: { get_param: image_id }
      key_name: { get_param: keypair }
      name: { get_param: hostname }
      networks:
      - port: { get_param: port_prim }
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #!/bin/bash
            
            echo cmueller
            echo "hostnames - $hostnames"
            echo myHostname - $myHostname
            
            echo "$hostnames" >> /etc/hosts
            #echo $myHostname > /etc/hostname

            export REPOSITORY_RABBITMQ="https://bitbucket.org/evoila-boxer/deployment-scripts-docker-openstack/raw/master/Rabbitmq-v3"
            export REPOSITORY_MAIN="https://bitbucket.org/evoila-boxer/deployment-scripts-docker-openstack/raw/master"
            export RABBITMQ_ERLANG_COOKIE=thisisjustatest4usguysfromEVOILA

            wget $REPOSITORY_RABBITMQ/rabbitmq-template.sh --no-cache
            wget $REPOSITORY_RABBITMQ/rabbitmq-cluster.sh --no-cache
            chmod +x rabbitmq-template.sh
            chmod +x rabbitmq-cluster.sh

            echo rabbitmq-template.sh -d $db_name -u $db_user -p $db_password -e openstack -l $log_host -m $log_port
            ./rabbitmq-template.sh -d $db_name -u $db_user -p $db_password -e openstack -l $log_host -m $log_port
            echo rabbitmq-cluster.sh -e $erlang_key -t primary
            ./rabbitmq-cluster.sh -e $erlang_key -t primary

            wc_notify --data-binary '{"status": "SUCCESS"}'

          params:
            $db_name: { get_param: database_name}
            $db_user: { get_param: database_user}
            $db_password: { get_param: database_password}
            $log_host: { get_param: log_host}
            $log_port: { get_param: log_port}
            $erlang_key: { get_param: erlang_key}
            $hostnames: { get_param: hostnames }
            $myHostname : { get_param: hostname }
            
            wc_notify: { get_attr: [  'wait_handle', 'curl_cli'] }
    
  wait_handle:
    type: OS::Heat::WaitConditionHandle
  wait_condition:
    type: OS::Heat::WaitCondition
    properties:
      handle: { get_resource: wait_handle }
      count: 1
      timeout: 600
  wait_for_it:
    type: OS::Heat::None
    depends_on: wait_condition
