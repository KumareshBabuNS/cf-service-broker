heat_template_version: 2015-10-15
description: Deployment Description for MongoDB Replica Set
parameters:
  image_id:
    type: string
    description: Image used for servers
  keypair:
    type: string
    description: SSH key to connect to the servers
  flavor:
    type: string
    description: flavor used by the web servers
  network_id:
    type: string
    description: Network used by the server
  subnet_id:
    type: string
    description: subnet on which the load balancer will be located
  volume_size:
    type: number
    description: Size of the volume to be created.
  availability_zone:
    type: string
    description: The Availability Zone to launch the instance.
  database_name:
    type: string
    description: Database name
  database_user:
    type: string
    description: Database user
  database_password:
    type: string
    description: Database password
  database_number:
    type: string
    description: Database number
  database_key:
    type: string
    description: Database key
  secondary_number:
    type: number
    description: number of secondaries for replica set
resources:
  wait_handle:
    type: OS::Heat::WaitConditionHandle
  wait_condition:
    type: OS::Heat::WaitCondition
    properties:
      handle: { get_resource: wait_handle }
      count: { get_param: secondary_number }
      timeout: 1000
  nova_instance_sec:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: secondary_number }
      resource_def:
        type: templateSingleSec.yaml
        properties:
          image_id: { get_param: image_id}
          network_id: { get_param: network_id}
          volume_size: { get_param: volume_size}
          keypair: { get_param: keypair}
          flavor: { get_param: flavor}
          availability_zone: { get_param: availability_zone}
          user_data:
            str_replace:
              template: |
                #!/bin/bash

                export REPOSITORY_MONGO="https://bitbucket.org/evoila-boxer/deployment-scripts-docker-openstack/raw/master/Mongo-v3"
                export REPOSITORY_MAIN="https://bitbucket.org/evoila-boxer/deployment-scripts-docker-openstack/raw/master"
                export REPOSITORY_MONGO_HA="https://bitbucket.org/evoila-boxer/deployment-scripts-docker-openstack/raw/master/Mongo-HA"
                export KEY="LDXOxI6ao87VWgSwrzjhjNnCpmheJdQbtMrgQNR2KVl2/9ca0Gd1BQ"

                wget $REPOSITORY_MONGO/mongo-template.sh
                chmod +x mongo-template.sh
                ./mongo-template.sh -d $db_name -u $db_user -p $db_password -e openstack

                echo $db_name $db_user $db_password

                wget $REPOSITORY_MONGO_HA/mongo-HA-repset-template.sh
                chmod +x mongo-HA-repset-template.sh
                ./mongo-HA-repset-template.sh -d $db_name -u $db_user -p $db_password -r $REPSET_NAME -k $KEY -x $INSTANCE_IP_PRIMARY -y $INSTANCE_IP_SECONDARY_01 -z $INSTANCE_IP_SECONDARY_02 -a secondary

                wc_notify --data-binary '{"status": "SUCCESS"}'
              params:
                $db_name: {get_param: database_name}
                $db_user: {get_param: database_user}
                $db_password: {get_param: database_password}
                $INSTANCE_IP_PRIMARY: test
                $INSTANCE_IP_SECONDARY_01: test
                $INSTANCE_IP_SECONDARY_02: test
                $REPSET_NAME: rs1
                $KEY: {get_param: database_key}
                wc_notify: { get_attr: [  'wait_handle', 'curl_cli'] }
  nova_instance_prim:
    type: templateSingleSec.yaml
    depends_on: wait_condition
    properties:
      image_id: { get_param: image_id}
      network_id: { get_param: network_id}
      volume_size: { get_param: volume_size}
      keypair: { get_param: keypair}
      flavor: { get_param: flavor}
      availability_zone: { get_param: availability_zone}

      user_data:
        str_replace:
          template: |
            #!/bin/bash

            export REPOSITORY_MONGO="https://bitbucket.org/evoila-boxer/deployment-scripts-docker-openstack/raw/master/Mongo-v3"
            export REPOSITORY_MAIN="https://bitbucket.org/evoila-boxer/deployment-scripts-docker-openstack/raw/master"
            export REPOSITORY_MONGO_HA="https://bitbucket.org/evoila-boxer/deployment-scripts-docker-openstack/raw/master/Mongo-HA"
            export KEY="LDXOxI6ao87VWgSwrzjhjNnCpmheJdQbtMrgQNR2KVl2/9ca0Gd1BQ"

            wget $REPOSITORY_MONGO/mongo-template.sh
            chmod +x mongo-template.sh
            ./mongo-template.sh -d $db_name -u $db_user -p $db_password -e openstack

            echo $db_name $db_user $db_password

            wget $REPOSITORY_MONGO_HA/mongo-HA-repset-template.sh
            chmod +x mongo-HA-repset-template.sh
            ./mongo-HA-repset-template.sh -d $db_name -u $db_user -p $db_password -r $REPSET_NAME -k $KEY -x $INSTANCE_IP_PRIMARY -y $INSTANCE_IP_SECONDARY_01 -z $INSTANCE_IP_SECONDARY_02 -a primary

          params:
            $db_name: {get_param: database_name}
            $db_user: {get_param: database_user}
            $db_password: {get_param: database_password}
            $INSTANCE_IP_PRIMARY: test
            $INSTANCE_IP_SECONDARY_01: test
            $INSTANCE_IP_SECONDARY_02: test
            $KEY: {get_param: database_key}
            $REPSET_NAME: rs1
  # port_sec:
  #   type: OS::Heat::ResourceGroup
  #   properties:
  #     count: 2
  #     resource_def:
  #       name: cinder_volume_sec%index%
  #       type: OS::Cinder::Volume
  #         size: { get_param: volume_size }
  #         availability_zone: { get_param: availability_zone }
  # port_sec:
  #   type: OS::Heat::ResourceGroup
  #   properties:
  #     count: 2
  #     resource_def:
  #       type: OS::Cinder::VolumeAttachment
  #       properties:
  #         name: volume_attachment_sec%index%
  #         volume_id: { get_resource: cinder_volume_sec%index% }
  #         instance_uuid: { get_resource: nova_instance_sec%index% }
  #         mountpoint: /dev/vdc
